{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/game/expression-recognition/ExpressionPredict.pipe.ts","./src/app/game/expression-recognition/expression-recognition.component.ts","./src/app/game/expression-recognition/expression-recognition.component.html","./src/app/game/game.component.ts","./src/app/game/game.component.html","./src/app/game/meme-generator/meme-generator.component.ts","./src/app/game/meme-generator/meme-generator.component.html","./src/app/game/meme-generator/meme-generator.service.ts","./src/environments/environment.ts","./src/main.ts","crypto (ignored)","node-fetch (ignored)","util (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { GameComponent } from './game/game.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {path: 'game', component: GameComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(\n    public router: Router\n  ){}\n  title = 'you-laugh-you-lose';\n}","<mat-toolbar color=\"primary\">\n  <span><h1>You Laugh, You Lose!</h1></span>\n  <button *ngIf=\"this.router.url === '/game'\" mat-stroked-button color=\"warn\" [routerLink]=\"['/']\">Stop</button>\n</mat-toolbar>\n<div class=\"container\">\n  <div class=\"options\">\n    <button *ngIf=\"this.router.url === '/'\" mat-stroked-button color=\"accent\" [routerLink]=\"['/game']\">Start</button>\n  </div>\n  <router-outlet></router-outlet>\n</div>","import { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { MemeGeneratorService } from './game/meme-generator/meme-generator.service';\nimport { ExpressionRecognitionComponent } from './game/expression-recognition/expression-recognition.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport { GameComponent } from './game/game.component';\nimport { MemeGeneratorComponent } from './game/meme-generator/meme-generator.component';\nimport {ExpressionPredictPipe } from './game/expression-recognition/ExpressionPredict.pipe';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n      GameComponent,\n      MemeGeneratorComponent,\n      ExpressionRecognitionComponent,\n      ExpressionPredictPipe\n   ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatProgressSpinnerModule,\n    HttpClientModule,\n    MatSnackBarModule\n  ],\n  providers: [\n    MemeGeneratorService,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'ExpressionPredict'\n})\nexport class ExpressionPredictPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    let result = '';\n    const sorted = value.asSortedArray();\n    const resultsToDisplay = sorted.filter(expr => expr.probability > 0.6);\n    resultsToDisplay.forEach(expr => {\n      result += `${expr.expression} (${this.round(expr.probability)}) \\n`;\n    });\n    return result;\n  }\n\n  round(num: number, prec: number = 2): number {\n    const f = Math.pow(10, prec);\n    return Math.floor(num * f) / f;\n  }\n\n}\n","import { Component, OnInit, AfterViewInit, OnDestroy, ElementRef, ViewChild, Output, EventEmitter, Input } from '@angular/core';\nimport * as faceapi from 'face-api.js';\nimport { interval, fromEvent } from 'rxjs';\n\n@Component({\n  selector: 'app-expression-recognition',\n  templateUrl: './expression-recognition.component.html',\n  styleUrls: ['./expression-recognition.component.scss']\n})\nexport class ExpressionRecognitionComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Output() newExpressionEvent = new EventEmitter<string>();\n  @ViewChild('videoElement') videoElement: ElementRef;\n  video: any;\n  mediaStream: any;\n  expressions: any;\n  minConfidence = 0.5;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    this.video = this.videoElement.nativeElement;\n\n    // Initilize neural networks and after that turn on camera\n    Promise.all([\n      faceapi.nets.tinyFaceDetector.loadFromUri('../assets/models'),\n      faceapi.nets.faceLandmark68Net.loadFromUri('../assets/models'),\n      faceapi.nets.faceExpressionNet.loadFromUri('../assets/models')\n    ]).then(() => this.startVideo());\n\n    this.recognizeExpressions();\n  }\n\n  startVideo(): void {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n\n      navigator.mediaDevices.getUserMedia({ video: true }).\n        then(mediaStream => {\n          this.mediaStream = mediaStream;\n\n          if ('srcObject' in this.video) {\n            this.video.srcObject = mediaStream;\n          } else {\n            this.video.src = URL.createObjectURL(mediaStream);\n          }\n\n        });\n    }\n  }\n\n  recognizeExpressions(): void {\n    const subscribe = fromEvent(this.video, 'play').subscribe(event => {\n      interval(100).subscribe(async () => {\n        const detections = await faceapi.detectAllFaces(this.video, new faceapi.TinyFaceDetectorOptions())\n          .withFaceLandmarks()\n          .withFaceExpressions();\n        if (detections.length) {\n          this.expressions = detections[0].expressions;\n          this.newExpressionEvent.emit(this.expressions);\n        }\n        if (this.video.srcObject) { subscribe.unsubscribe(); }\n      });\n    });\n  }\n\n  ngOnDestroy(): void {\n    const tracks = this.mediaStream.getTracks();\n    tracks.forEach(track => {\n      track.stop();\n    });\n  }\n\n}\n","<video #videoElement width=\"0\" height=\"0\" autoplay></video>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.scss'],\n})\nexport class GameComponent implements OnInit {\n  @ViewChild('memeGenerator') memeGenerator;\n  expressions: any;\n  expressionRecognitionLoaded = false;\n  memeGeneratorLoaded = false;\n  laughCounter = 0;\n  get readyToPlay(): boolean {\n    return this.expressionRecognitionLoaded && this.memeGeneratorLoaded;\n  }\n  alreadyLaughed = false;\n\n  constructor(\n    private _snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onExpressionChange(value: any): void {\n    this.expressions = value;\n    const [expression, confidence] = this.predict(this.expressions).split(' ');\n    if (expression === 'happy' && !this.alreadyLaughed ) {\n      this.alreadyLaughed = true;\n      this.laughCounter += 1;\n      const message = `You smiled/laughed ${this.laughCounter} times, you were ${confidence} happy`;\n      this._snackBar.open(message, 'close', {\n        duration: 4000,\n      });\n    }\n    this.expressionRecognitionLoaded = true;\n  }\n\n  onMemeGeneratorLoad(): void {\n    this.memeGeneratorLoaded = true;\n  }\n\n  predict(value: any, args?: any): any {\n    let result = '';\n    const sorted = value.asSortedArray();\n    const resultsToDisplay = sorted.filter(expr => expr.probability > 0.6);\n    resultsToDisplay.forEach(expr => {\n      result += `${expr.expression} (${this.round(expr.probability)}) \\n`;\n    });\n    return result;\n  }\n\n  round(num: number, prec: number = 2): number {\n    const f = Math.pow(10, prec);\n    return Math.floor(num * f) / f;\n  }\n\n  nextMeme(): void{\n    this.memeGenerator.loadMeme();\n    this.alreadyLaughed = false;\n  }\n\n}\n","<div style=\"display: flex; justify-content: center;\">\n    <button mat-flat-button color=\"warn\" [routerLink]=\"['/']\">Stop game</button>\n    <app-meme-generator #memeGenerator (OnLoad)=\"onMemeGeneratorLoad()\"></app-meme-generator>\n    <app-expression-recognition (newExpressionEvent)=\"onExpressionChange($event)\">\n    </app-expression-recognition>\n    <button mat-flat-button color=\"accent\" (click)=\"nextMeme()\">Next Meme</button>\n</div>\n\n<div *ngIf=\"!readyToPlay\" class=\"loading\">\n    <mat-spinner style=\"margin:30% auto;\" ></mat-spinner>\n</div>","import { MemeGeneratorService } from './meme-generator.service';\nimport { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-meme-generator',\n  templateUrl: './meme-generator.component.html',\n  styleUrls: ['./meme-generator.component.scss']\n})\nexport class MemeGeneratorComponent implements OnInit {\n  @Output() OnLoad = new EventEmitter();\n  title: any;\n  subReddit: any;\n  imgUrl: any;\n  author: any;\n\n  constructor(\n    private memeGeneratorService: MemeGeneratorService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadMeme();\n  }\n\n  loadMeme(): void {\n    let postHint = true;\n    this.memeGeneratorService.getRandomMeme().subscribe(data => {\n      data = data[0].data.children[0].data;\n      if (data.post_hint && data.post_hint === 'image') {\n        this.title = data.title;\n        this.subReddit = data.subreddit_name_prefixed;\n        this.imgUrl = data.url;\n        this.author = data.author;\n        postHint = false;\n      } else {\n        this.loadMeme();\n      }\n    });\n    this.OnLoad.emit();\n  }\n\n}\n","<mat-card class=\"meme-card\">\n  <img mat-card-image src=\"{{imgUrl}}\" alt=\"Photo of a {{author}}\">\n  <mat-card-header>\n    <div mat-card-avatar class=\"header-image\"></div>\n    <mat-card-title>{{title}}</mat-card-title>\n    <mat-card-subtitle>{{subReddit}}, {{author}}</mat-card-subtitle>\n  </mat-card-header>\n</mat-card>","import { Injectable } from '@angular/core';\nimport { Observable, fromEvent } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemeGeneratorService {\n  private subReddits = ['memebot9000', 'dankmemes', 'memes', 'hmm'];\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getRandomMeme(): Observable<any> {\n    // get random index from subbreddits array\n    const randomIndex = this.getRandomInt(this.subReddits.length);\n    return this.http.get(`https://www.reddit.com/r/${this.subReddits[randomIndex]}/random.json`);\n  }\n\n  private getRandomInt(max): number {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":"webpack:///"}